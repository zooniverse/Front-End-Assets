#!/usr/bin/env ruby

require "thor"
require "colored"
require "fileutils"
require "grabass"
require_relative "../lib/zoo"

class ZooApp < Thor
  desc "init \"PROJECT NAME\"", "Initialize a new Zooniverse project"
  method_option :domain, type: :string, aliases: "-d"
  method_option :templates_only, type: :boolean, aliases: "-t"
  def init(project = "New Project")
    project_js = project.camelize
    project_domain = options.domain || "#{project.downcase.run_together}.org"
    project_dash = project.downcase.dasherize
    project_under = project.downcase.underscore

    puts "=> Initializing #{project} at #{project_domain}".green

    if File.exists? project_dash
      puts "Directory #{project_dash}/ already exists!".red
      exit 1
    end

    puts "=> Initializing Git repository in #{project_dash}".green
    system "git init #{project_dash}"

    FileUtils.cd project_dash

    Zoo.install_templates "init", binding

    unless options.templates_only
      library_repo = 'git@github.com:zooniverse/Front-End-Assets.git'
      library_destination = 'src/scripts/lib/zooniverse'
      puts "=> Submodule-ing front-end Zooniverse library into #{library_destination}".green
      system "git submodule add --branch framework #{library_repo} #{library_destination}"
    end

    puts "=> Creating first commit".green
    system "git add --all"
    system "git commit --message \"New project: #{project}\""

    unless options.templates_only
      puts "=> Installing third-party assets".green
      system "grabass ./assets.json"
    end

    # TODO: Check to make sure everything worked.
    puts "=> Finished initialization. Project is at ./#{project_dash}/".green
  end

  desc "generate TYPE NAME", "Generate a model or controller"
  map "g" => :generate
  def generate(type, name)
    puts "=> Generating a new #{type}: #{name}".green

    name_dash = name.gsub(/([a-z])([A-Z])/, "\\1-\\2").downcase
    Zoo.install_templates type, binding
  end


  desc "serve [PORT]", "Run a local server"
  method_option :port, type: :string, default: '8080', aliases: "-p"
  def server(command="start")
    if command == 'start'
      puts "=> Serving at http://localhost:#{options.port}/".green
      pids = [
        Process.spawn("coffee --compile --output scripts --watch src/scripts"),
        Process.spawn("sass --watch src/styles:styles --no-cache --debug-info"),
        Process.spawn("sass --watch src/scripts/lib/zooniverse/styles:styles/zooniverse --no-cache --debug-info"),
        Process.spawn("python -m SimpleHTTPServer #{options.port}")
      ]

      system "echo \"#{pids.join ' '}\" > .zoo_server_pids"
    elsif command == "stop"
      pids = File.read ".zoo_server_pids"
      puts "=> Killing #{pids}".green
      system "kill #{pids}"
      FileUtils.rm ".zoo_server_pids"
    end
  end

  desc "bundle [OUTPUT_DIRECTORY]", "Bundle and minify resources for deployment"
  def bundle(output_dir="BUNDLE_#{Time.now.strftime "%Y_%m_%d_%H_%M_%S"}")
    puts "=> TODO: Bundling into #{output_dir}".green
  end

  desc "deploy S3_BUCKET", "Deploy to S3"
  def deploy(s3_bucket)
    puts "=> TODO: Deploying to #{s3_bucket}".green
  end
end

ZooApp.start
