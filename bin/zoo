#!/usr/bin/env ruby

require 'erb'
require 'fileutils'

TemplateDir = File.join File.dirname(__FILE__), '..', 'templates'
TemplateExt = '.erb'

def dasherize (str)
  str.downcase.gsub /\s+/, '-'
end

def javascriptize (str)
  str.downcase.gsub(/\s+\w/) {|x| x.upcase.sub /\s+/, ''}
end

def log (prefix, message)
 puts prefix + (' ' * (4 - prefix.length)) + message
end

def run_templates (type, binding)
  templates_search = File.join TemplateDir, type, '**', "*#{TemplateExt}"
  templates = Dir.glob(templates_search, File::FNM_DOTMATCH).select {|item| File.file? item}

  templates.each do |file|
    template = ERB.new File.read file

    local_file = file.sub File.join(TemplateDir, type), '.'
    local_file = local_file.sub '__NAME__', eval('name', binding).to_s
    local_file = local_file.sub TemplateExt, ''

    log '+', local_file

    if File.exists? local_file
      log '', 'File already exists!'
    else
      FileUtils.mkdir_p File.dirname local_file
      File.new(local_file, 'w').write(template.result binding)
    end
  end

  dirs_search = File.join TemplateDir, type, '**', '**'
  directories = Dir.glob(dirs_search).select {|item| File.directory? item}
  # TODO: Dot-prefixed dirs?
  directories.each do |dir|
    local_dir = dir.sub File.join(TemplateDir, type), '.'
    unless File.directory? local_dir
      log '+', "#{local_dir}/"
      FileUtils.mkdir_p local_dir
    end
  end
end

command = ARGV.shift
case command.to_sym
when :init
  project = ARGV.join ' '
  project_js = javascriptize project
  project_dash = dasherize project

  log '-=>', "Initializing a new zoo: #{project}"
  run_templates command, binding

  puts
  log '-=>', 'Now run `bundle install` and `grabass assets.json`'
  # TODO: Do that automatically.

when :generate, :g
  generator = ARGV.shift
  ARGV.each do |name|
    log '-=>', "Generating a new #{generator}: #{name}"
    run_templates generator.to_s, binding
  end

when :dev
  log '', 'TODO: Run a server in the current directory'

when :build
  log '', 'TODO: Package everything up into a directory Jekyll-style'

when :deploy
  log '', 'TODO: Build and push to S3'
end
