#!/usr/bin/env ruby

require "thor"
require "colored"
require "fileutils"
require "grabass"
require_relative "../lib/zoo"

ServerPidsFile = ".zoo_server_pids"

class ZooApp < Thor
  desc "init \"PROJECT NAME\"", "Initialize a new Zooniverse project"
  method_option :domain, type: :string, aliases: "-d"
  method_option :here, type: :boolean, aliases: "-h"
  def init(project = "New Project")
    project_js = project.camelize
    project_domain = options.domain || "#{project.downcase.run_together}.org"
    project_dash = project.downcase.dasherize
    project_under = project.downcase.underscore

    puts "=> Initializing #{project} at #{project_domain}".green

    init_dir = "."

    unless options.here
      if File.exists? project_dash
        puts "Directory #{project_dash}/ already exists!".red
        exit 1
      end
      init_dir = project_dash
    end

    unless File.exists? File.join init_dir, ".git"
      puts "=> Initializing Git repository in #{init_dir}".green
      system "git init #{init_dir}"
      new_repo = true
    end

    FileUtils.cd init_dir

    Zoo.install_templates "init", binding

    library_repo = 'git@github.com:zooniverse/Front-End-Assets.git'
    library_destination = 'src/scripts/lib/zooniverse'
    puts "=> Submodule-ing front-end Zooniverse library into #{library_destination}".green
    system "git submodule add --branch framework #{library_repo} #{library_destination}"

    if new_repo
      puts "=> Creating first commit".green
      system "git add --all"
      system "git commit --message \"New project: #{project}\""
    else
      puts "=> Not creating an initial commit since there was already a repo.".yellow
    end

    puts "=> Installing third-party assets".green
    system "grabass ./assets.json"

    # TODO: Check to make sure everything worked.
    puts "=> Finished initialization. Project is in \"#{init_dir}\".".green
  end

  desc "generate TYPE NAME", "Generate a model or controller"
  map "g" => :generate
  def generate(type, name)
    puts "=> Generating a new #{type}: #{name}".green

    name_dash = name.gsub(/([a-z])([A-Z])/, "\\1-\\2").downcase
    Zoo.install_templates type, binding
  end


  desc "serve [PORT]", "Run a local server"
  method_option :port, type: :string, default: '8080', aliases: "-p"
  method_option :force, type: :boolean, aliases: "-f"
  def server(command="start")
    case command.to_sym
    when :start
      if options.force
        FileUtils.rm ServerPidsFile
      end

      if File.exists? ServerPidsFile
        puts "=> A server is already running here. Try `zoo server stop`"
        exit 1
      end

      puts "=> Serving at http://localhost:#{options.port}/".green

      pids = [
        Process.spawn("coffee --compile --output scripts --watch src/scripts"),
        Process.spawn("coffee --compile --output scripts --watch src/scripts/lib/zooniverse/main.coffee"),
        Process.spawn("sass --watch src/styles:styles --no-cache --debug-info"),
        Process.spawn("sass --watch src/scripts/lib/zooniverse/styles/main.scss:styles/zooniverse.css --no-cache --debug-info"),
        Process.spawn("python -m SimpleHTTPServer #{options.port}")
      ]

      File.write ServerPidsFile, pids.join(' ')

    when :stop
      pids = File.read ServerPidsFile
      puts "=> Killing #{pids}".green
      system "kill #{pids}"
      FileUtils.rm ServerPidsFile
    end
  end

  desc "build [OUTPUT_DIRECTORY]", "Bundle and minify resources for deployment"
  method_option :all, type: :boolean, aliases: "-a"
  def build(output_dir="build-#{Time.now.strftime "%Y.%m.%d-%H.%M.%S"}")
    unless system 'which r.js'
      puts "=> You need to install the RequireJS optimizer. Try `npm install -g requirejs`.".red
      exit 1
    end

    puts "=> Compiling CoffeeScript (src/scripts to scripts)".green
    system "coffee --compile --output scripts src/scripts"

    puts "=> Compiling RequireJS config (src/scripts/lib/zooniverse/main.coffee to scripts/main.js)".green
    system "coffee --compile --output scripts src/scripts/lib/zooniverse/main.coffee"

    puts "=> Optimizing JavaScript (building to scripts/build/main.js)".green
    system "r.js -o scripts/build.json"

    puts "=> Compiling site SASS (src/styles to styles)".green
    system "sass --update --style compressed src/styles:styles --no-cache"

    puts "=> Compiling Zooniverse SASS (src/scripts/lib/zooniverse/styles/main.scss to styles/zooniverse.css)".green
    system "sass --update src/scripts/lib/zooniverse/styles/main.scss:styles/zooniverse.css --style compressed --no-cache"

    puts "=> Bundling into #{output_dir}".green

    ignore_these = ['assets.json', 'bin', 'Gemfile', 'Gemfile.lock', 'README.md', 'src']
    items_to_copy = Dir['*']

    items_to_copy = items_to_copy - ignore_these unless options.all

    FileUtils.mkdir_p output_dir
    items_to_copy.each do |item|
      FileUtils.cp_r item, File.join(output_dir, item)
    end
  end

  desc "deploy S3_BUCKET", "Deploy to S3"
  def deploy(s3_bucket)
    puts "=> TODO: Deploying to #{s3_bucket}".red
  end
end

ZooApp.start
