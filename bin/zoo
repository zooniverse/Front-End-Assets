#!/usr/bin/env ruby

require "thor"
require "colored"
require "fileutils"
require_relative "../lib/zoo"

class ZooApp < Thor
  desc "create PROJECT NAME", "Create a new Zooniverse project"
  method_option :domain, type: :string, aliases: "-d", desc: "Set a different domain"
  method_option :here, type: :boolean, aliases: "-h", desc: "Create a project in the current directory"
  def create(*project)
    project = project.join ' '
    project = 'New Project' if project.empty?

    project_js = project.camelize
    project_domain = options.domain || "#{project.downcase.run_together}.org"
    project_dash = project.downcase.dasherize
    project_under = project.downcase.underscore

    puts "=> Creating #{project} at #{project_domain}".green

    create_dir = "."

    unless options.here
      if File.exists? project_dash
        puts "Directory #{project_dash}/ already exists!".red
        exit 1
      end
      create_dir = project_dash
    end

    unless File.exists? File.join create_dir, ".git"
      puts "=> Initializing Git repository in #{create_dir}".green
      system "git init #{create_dir}"
      new_repo = true
    end

    FileUtils.cd create_dir

    Zoo.install_templates "create", binding

    library_repo = 'git@github.com:zooniverse/Front-End-Assets.git'
    library_destination = 'src/scripts/lib/zooniverse'
    puts "=> Submodule-ing front-end Zooniverse library into #{library_destination}".green
    system "git submodule add --branch framework #{library_repo} #{library_destination}"

    if new_repo
      puts "=> Creating first commit".green
      system "git add --all"
      system "git commit --message \"New project: #{project}\""
    else
      puts "=> Not creating an initial commit since there was already a repo.".yellow
    end

    install()

    # TODO: Check to make sure everything worked.
    puts "=> New project is in \"#{create_dir}\".".green
  end

  desc "clone REPO", "Clone an existing repo from GitHub"
  method_option :user, type: :string, default: "zooniverse", aliases: "-u", desc: "Specify a GitHub user to clone from"
  method_option :branch, type: :string, default: "master", aliases: "-b", desc: "Specify a branch"
  def clone(repository, destination="")
    destination = repository if destination.empty?
    puts "=> Cloning #{options.user}/#{repository} into #{destination}".green
    system "git clone git@github.com:#{options.user}/#{repository}.git #{destination} --branch #{options.branch}"
    FileUtils.cd destination
    install()

    puts "=> Project is in \"#{destination}\".".green
  end

  desc "install", "Init and update submodules, move things into place, install assets"
  def install()
    puts "=> Initializing and updating git submodules".green
    system "git submodule init"
    system "git submodule update"

    puts "=> Moving images from Zooniverse library".green
    images_destination = File.join("styles", "lib")
    FileUtils.mkdir_p images_destination
    FileUtils.cp_r File.join("src", "scripts", "lib", "zooniverse", "images"), File.join(images_destination, "zooniverse")

    puts "=> Installing third-party assets".green
    system "grabass ./assets.json"

    puts "=> Installing Bourbon SASS mixins".green
    styles_lib = File.join('src', 'styles', 'lib')
    FileUtils.mkdir_p styles_lib
    FileUtils.cd styles_lib
    system "bourbon install"
    FileUtils.cd File.join('..', '..', '..')
  end

  desc "generate TYPE NAME", "Generate a model or controller"
  map "g" => :generate
  def generate(type, name)
    puts "=> Generating a new #{type}: #{name}".green

    style_name = name.gsub(/([a-z])([A-Z])/, "\\1-\\2").downcase
    style_filename = "_#{style_name}"
    Zoo.install_templates type, binding
    File.open File.join("src", "styles", "main.scss"), "a" do |file|
      file.puts "@import \"#{style_name}\";"
    end
  end

  desc "serve [PORT]", "Run a local server"
  def serve(port='8080')
    server_env = {"ZOO_SERVER_PORT" => port}
    procfile = File.join File.dirname(File.dirname(__FILE__)), "lib", "server", "Procfile"
    directory = Dir.pwd

    puts "=> Starting up a server at http://localhost:#{port}".green
    exec server_env, "foreman start --app-root #{directory} --procfile #{procfile}"
  end

  desc "build [OUTPUT_DIRECTORY]", "Bundle and minify resources for deployment"
  method_option :no_copy, type: :boolean, aliases: "-n", desc: "Don't create a bundled directory"
  method_option :all, type: :boolean, aliases: "-a", desc: "Bundle all the files, even the ones we'd noramlly ignore"
  def build(output_dir="")
    timestamp = Time.now.strftime "%Y-%m-%d-%H-%M-%S"
    output_dir = "build-#{timestamp}" if output_dir.empty?

    puts "=> Checking for RequireJS optimizer".green
    unless system 'which r.js'
      puts "=> RequireJS optimizer not found. Try `npm install -g requirejs@2.0.0`. The version is important.".red
      exit 1
    end

    puts "=> Compiling CoffeeScript (src/scripts to scripts)".green
    system "coffee --compile --output scripts src/scripts"

    puts "=> Compiling RequireJS config (src/scripts/lib/zooniverse/main.coffee to scripts/main.js)".green
    system "coffee --compile --output scripts src/scripts/lib/zooniverse/main.coffee"

    puts "=> Optimizing JavaScript (building to scripts/build/main.js)".green
    system "r.js -o scripts/build.json"

    puts "=> Compiling site SASS (src/styles to styles)".green
    system "sass --update src/styles:styles --require bourbon --style compressed  --no-cache"

    puts "=> Compiling Zooniverse SASS (src/scripts/lib/zooniverse/styles/main.scss to styles/zooniverse.css)".green
    system "sass --update src/scripts/lib/zooniverse/styles/main.scss:styles/zooniverse.css --style compressed --no-cache"

    unless options.no_copy
      if File.exists? output_dir
        puts "Directory \"#{output_dir}\" already exists.".red
        exit 1
      end

      puts "=> Bundling into #{output_dir}".green

      ignore_these = ['assets.json', 'bin', 'Gemfile', 'Gemfile.lock', 'README.md', 'src']
      items_to_copy = Dir['*']

      items_to_copy = items_to_copy - ignore_these unless options.all

      FileUtils.mkdir_p output_dir
      items_to_copy.each do |item|
        FileUtils.cp_r item, File.join(output_dir, item)
      end

      puts "=> Applying timestamps to index.html".green
      index_file = File.join output_dir, "index.html"
      input = File.read index_file
      output = input.gsub "__ZOO_BUILD_TIMESTAMP__", timestamp
      File.write index_file, output
    end
  end

  desc "deploy S3_BUCKET", "Deploy to S3"
  def deploy(s3_bucket)
    puts "=> TODO: Deploying to #{s3_bucket}".red
  end
end

ZooApp.start
