// Generated by CoffeeScript 1.3.1
(function() {
  var define,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define = window.define || function(callback) {
    var module, require;
    require = window.require || function(module) {
      return window[module];
    };
    module = {
      exports: {}
    };
    callback(require, module.exports, module);
    return window.Tutorial = module.exports;
  };

  define(function(require, exports, module) {
    var $, Tutorial;
    $ = require('jQuery');
    Tutorial = (function() {
      var current;

      Tutorial.name = 'Tutorial';

      Tutorial.prototype.steps = null;

      Tutorial.prototype.className = 'tutorial-step';

      Tutorial.prototype.controlsClass = 'tutorial-controls';

      Tutorial.prototype.arrowClass = 'tutorial-arrow';

      Tutorial.prototype.messageClass = 'tutorial-message';

      Tutorial.prototype.continueClass = 'tutorial-continue';

      Tutorial.prototype.skipText = '&rarr;';

      Tutorial.prototype.skipTitle = 'Skip this step';

      Tutorial.prototype.exitText = '&times;';

      Tutorial.prototype.exitTitle = 'Exit tutorial';

      Tutorial.prototype.el = null;

      Tutorial.prototype.message = null;

      Tutorial.prototype.arrow = null;

      current = -1;

      function Tutorial(_arg) {
        this.steps = _arg.steps;
        this.end = __bind(this.end, this);

        this.next = __bind(this.next, this);

        this.start = __bind(this.start, this);

        if (this.steps == null) {
          this.steps = [];
        }
        this.el = $("<div class='" + this.className + "'></div>");
        this.controls = $("<div class=\"" + this.controlsClass + "\">\n  <button value=\"skip\" title=\"" + this.skipTitle + "\">" + this.skipText + "</button>\n  <button value=\"end\" title=\"" + this.exitTitle + "\">" + this.exitText + "</button>\n</div>");
        this.message = $("<div class='" + this.messageClass + "'></div>");
        this.arrow = $("<div class='" + this.arrowClass + "'></div>");
        this.controls.appendTo(this.el);
        this.message.appendTo(this.el);
        this.arrow.appendTo(this.el);
        this.controls.on('click', '[value="skip"]', this.next);
        this.controls.on('click', '[value="end"]', this.end);
        this.el.appendTo($('body'));
      }

      Tutorial.prototype.start = function() {
        this.message.css({
          display: ''
        });
        this.current = -1;
        return this.next();
      };

      Tutorial.prototype.next = function(e) {
        if (e != null) {
          e.stopPropagation();
        }
        if (!!~this.current) {
          this.steps[this.current].leave();
        }
        this.current += 1;
        if (this.steps[this.current]) {
          return this.steps[this.current].enter(this);
        } else {
          return this.end();
        }
      };

      Tutorial.prototype.end = function() {
        return this.el.css({
          display: 'none'
        });
      };

      return Tutorial;

    })();
    Tutorial.Step = (function() {

      Step.name = 'Step';

      Step.prototype.content = '';

      Step.prototype.modal = false;

      Step.prototype.style = null;

      Step.prototype.className = '';

      Step.prototype.attach = null;

      Step.prototype.nextOn = null;

      Step.prototype.continueText = 'Next';

      Step.prototype.tutorial = null;

      function Step(_arg) {
        this.content = _arg.content, this.style = _arg.style, this.attach = _arg.attach, this.nextOn = _arg.nextOn, this.className = _arg.className, this.arrowClass = _arg.arrowClass;
        this.leave = __bind(this.leave, this);

        this.enter = __bind(this.enter, this);

        if (!(this.content instanceof Array)) {
          this.content = [this.content];
        }
      }

      Step.prototype.enter = function(tutorial) {
        var buttonsHolder, eventName, selector, _ref;
        this.tutorial = tutorial;
        this.tutorial.message.html("<p>" + (this.content.join('</p><p>')) + "</p>");
        if (this.nextOn != null) {
          _ref = this.nextOn;
          for (eventName in _ref) {
            selector = _ref[eventName];
            $(document).on(eventName, selector, this.tutorial.next);
          }
        } else {
          buttonsHolder = $("<div class='" + this.tutorial.continueClass + "'><button>" + this.continueText + "</button></div>");
          this.tutorial.message.append(buttonsHolder);
          this.tutorial.el.on('click', "." + this.tutorial.continueClass + " button", this.tutorial.next);
        }
        if (this.style) {
          this.tutorial.el.css(this.style);
        }
        if (this.arrowClass) {
          this.tutorial.arrow.addClass(this.arrowClass);
        }
        if (this.attach) {
          this.moveMessage(this.attach.x, this.attach.y, this.attach.to, this.attach.at.x, this.attach.at.y);
        }
        if (this.className) {
          return this.tutorial.el.addClass(this.className);
        }
      };

      Step.prototype.moveMessage = function(stepX, stepY, target, targetX, targetY) {
        var stepOffset, stepSize, targetOffset, targetSize, xStrings, yStrings;
        xStrings = {
          left: 0,
          center: 0.5,
          right: 1
        };
        yStrings = {
          top: 0,
          middle: 0.5,
          bottom: 1
        };
        if (stepX in xStrings) {
          stepX = xStrings[stepX];
        }
        if (stepY in yStrings) {
          stepY = yStrings[stepY];
        }
        if (targetX in xStrings) {
          targetX = xStrings[targetX];
        }
        if (targetY in yStrings) {
          targetY = yStrings[targetY];
        }
        target = $(target).first();
        targetSize = {
          width: target.width(),
          height: target.outerHeight()
        };
        targetOffset = target.offset();
        stepSize = {
          width: this.tutorial.el.width(),
          height: this.tutorial.el.outerHeight()
        };
        stepOffset = {
          left: targetOffset.left - (stepSize.width * stepX) + (targetSize.width * targetX),
          top: targetOffset.top - (stepSize.height * stepY) + (targetSize.height * targetY)
        };
        return this.tutorial.el.offset(stepOffset);
      };

      Step.prototype.leave = function() {
        var eventName, selector, _ref;
        this.tutorial.message.html('');
        if (this.nextOn != null) {
          _ref = this.nextOn;
          for (eventName in _ref) {
            selector = _ref[eventName];
            $(document).off(eventName, selector, this.tutorial.next);
          }
        } else {
          this.tutorial.el.off('click', "." + this.tutorial.continueClass + " button", this.tutorial.next);
        }
        if (this.arrowClass) {
          this.tutorial.arrow.removeClass(this.arrowClass);
        }
        if (this.className) {
          return this.tutorial.el.removeClass(this.className);
        }
      };

      return Step;

    })();
    if ((module != null ? module.exports : void 0) != null) {
      return module.exports = Tutorial;
    } else {
      return window.Tutorial = Tutorial;
    }
  });

}).call(this);
